name: "AIN-10 ‚Ä¢ intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      session_start:
        description: "Session start (HH:MM JST)"
        required: true
        default: "22:30"
      session_end:
        description: "Session end (HH:MM JST)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor time (HH:MM JST)"
        required: true
        default: "22:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close

  # ÁîüÊàêÁâ©Ôºà„Åì„ÅÆ„É™„ÉùÂÜÖ„ÅÆ‰∏ÄÊôÇÂá∫ÂäõÔºâ
  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  # ÂÖ¨Èñã„Çµ„Ç§„Éà„É™„Éù
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  # ÂÖ¨ÈñãÂÖà„Éá„Ç£„É¨„ÇØ„Éà„É™Ôºà„Çµ„Ç§„ÉàÂÜÖÔºâ
  PUBLISH_DIR: docs/charts/AIN10
  # PAT „Åå„ÅÇ„Çå„Å∞ÂÑ™ÂÖà„ÄÅÁÑ°„Åë„Çå„Å∞ GITHUB_TOKEN
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          python -m pip install pandas matplotlib numpy pytz

      - name: Verify inputs & files
        run: |
          test -f "${CSV}" || (echo "‚ùå Missing CSV: ${CSV}" && exit 1)

      - name: Prepare output dirs
        run: |
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      - name: Generate intraday snapshot (US session, JST)
        env:
          SESSION_START: ${{ inputs.session_start }}
          SESSION_END:   ${{ inputs.session_end }}
          DAY_ANCHOR:    ${{ inputs.day_anchor }}
          VALUE_TYPE:    ${{ inputs.value_type }}
        run: |
          python - <<'PY'
          import os, json
          from pathlib import Path
          import pandas as pd, numpy as np
          from datetime import timedelta
          import matplotlib
          matplotlib.use("Agg")
          import matplotlib.pyplot as plt

          # ---------- env ----------
          CSV = Path(os.environ["CSV"])
          OUT_JSON = Path(os.environ["OUT_JSON"])
          OUT_TEXT = Path(os.environ["OUT_TEXT"])
          SNAPSHOT_PNG = Path(os.environ["SNAPSHOT_PNG"])
          LABEL = os.environ.get("LABEL","AIN-10")
          INDEX_KEY = os.environ.get("INDEX_KEY","AIN-10")
          DT_COL = os.environ.get("DT_COL","")
          BASIS = os.environ.get("BASIS","prev_close")
          VTYPE = os.environ.get("VALUE_TYPE","auto").lower()
          S_START = os.environ.get("SESSION_START","22:30")
          S_END   = os.environ.get("SESSION_END","05:00")
          D_ANCHOR= os.environ.get("DAY_ANCHOR","22:30")
          JST = "Asia/Tokyo"

          # ---------- helpers ----------
          def _auto_dt_col(df):
            # ÂÑ™ÂÖàÂÄôË£ú
            cand = ["Datetime","datetime","Timestamp","timestamp","Date","date","Time","time"]
            for c in cand:
              if c in df.columns:
                try:
                  x = pd.to_datetime(df[c], errors="coerce")
                  if x.notna().mean() >= 0.7: return c
                except: pass
            # Êï∞„ÅßÊúÄËâØÂÄôË£ú
            best, bestv = None, -1.0
            for c in df.columns:
              try:
                v = pd.to_datetime(df[c], errors="coerce").notna().mean()
                if v > bestv: best, bestv = c, v
              except: pass
            return best

          def _to_percent_series(s, value_type):
            s = pd.to_numeric(s, errors="coerce")
            vt = value_type
            if vt == "auto":
              # 95%ÁÇπ„ÅÆÁµ∂ÂØæÂÄ§„Åå0.5Êú™Ê∫Ä„Å™„Çâ ratio „Å®„Åø„Å™„Åô
              arr = s.to_numpy()
              arr = arr[~np.isnan(arr)]
              if arr.size == 0: return s # „Åù„ÅÆ„Åæ„Åæ
              vt = "ratio" if float(np.quantile(np.abs(arr), 0.95)) < 0.5 else "percent"
            if vt == "ratio":  # 0.01 ‚Üí 1%
              s = s * 100.0
            return s

          # ---------- load ----------
          df = pd.read_csv(CSV)
          if df.empty: raise RuntimeError("CSV „ÅåÁ©∫„Åß„Åô„ÄÇ")
          dt_col = DT_COL if DT_COL in df.columns else _auto_dt_col(df)
          if not dt_col: raise RuntimeError("Êó•ÊôÇÂàó„ÇíÊ§úÂá∫„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")

          dt = pd.to_datetime(df[dt_col], errors="coerce")
          if dt.dt.tz is None: dt = dt.dt.tz_localize("UTC", nonexistent="NaT", ambiguous="NaT")
          # UTC ‚Üí JST
          dt = dt.dt.tz_convert(JST)
          df = df.set_index(dt).drop(columns=[dt_col]).sort_index()

          # Êï∞ÂÄ§Âàó„ÇíÈÅ∏„Å∂
          numcols = [c for c in df.columns if pd.to_numeric(df[c], errors="coerce").notna().mean() > 0.6]
          if not numcols: numcols = [df.columns[-1]]
          valcol = numcols[0]
          df[valcol] = _to_percent_series(df[valcol], VTYPE)

          # ---------- session filter (JST) ----------
          last = df.index[-1]
          s_h, s_m = map(int, S_START.split(":"))
          e_h, e_m = map(int, S_END.split(":"))
          sdt = last.replace(hour=s_h, minute=s_m, second=0, microsecond=0)
          edt = last.replace(hour=e_h, minute=e_m, second=0, microsecond=0)
          if edt <= sdt: edt += timedelta(days=1)
          sess = df.loc[(df.index >= sdt) & (df.index <= edt)]
          if sess.empty:
            # „Çª„ÉÉ„Ç∑„Éß„É≥ÂÜÖ„ÅåÁ©∫„Å™„ÇâÁõ¥Ëøë1Êó•ÂàÜ
            sess = df.last("1D")
          y = pd.to_numeric(sess[valcol], errors="coerce").dropna()
          if y.empty: y = pd.Series([0.0], index=[last])

          last_pct = float(y.iloc[-1])
          last_ratio = round(last_pct/100.0, 6)  # JSON„ÅØ ratioÔºàÂ∞èÊï∞Ôºâ

          # ---------- plot (dark theme) ----------
          now_jst = pd.Timestamp.now(tz=JST)
          fig, ax = plt.subplots(figsize=(12,6), dpi=160)
          fig.patch.set_facecolor("#000000")
          ax.set_facecolor("#000000")
          for sp in ax.spines.values(): sp.set_color("#444444")
          ax.grid(True, color="#333333", linewidth=0.6, alpha=0.7)

          line_color = "#00E5FF" if last_pct >= 0 else "#FF4D4D"
          ax.plot(y.index, y.values, color=line_color, linewidth=2.0)

          title = f"{LABEL} Intraday Snapshot ({now_jst:%Y/%m/%d %H:%M JST})  {last_pct:+.2f}%"
          ax.set_title(title, color="#DDDDDD", pad=14)
          ax.set_xlabel("Time (JST)", color="#BBBBBB")
          ax.set_ylabel("Change vs Prev Close (%)", color="#BBBBBB")
          ax.tick_params(colors="#BBBBBB")

          fig.tight_layout()
          fig.savefig(SNAPSHOT_PNG, facecolor=fig.get_facecolor(), edgecolor="none")
          plt.close(fig)

          # ---------- outputs ----------
          OUT_TEXT.write_text(
            f"{LABEL}  Êó•‰∏≠„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà ({now_jst:%Y/%m/%d %H:%M})\n"
            f"{last_pct:+.2f}% (Âü∫Ê∫ñ: {BASIS})\n"
            f"#{INDEX_KEY.replace('-','')} #Êó•Êú¨Ê†™\n",
            encoding="utf-8"
          )

          stats = {
            "index_key": INDEX_KEY,
            "label": LABEL,
            "pct_intraday": last_ratio,       # ratio
            "basis": BASIS,
            "session": {"start": S_START, "end": S_END, "anchor": D_ANCHOR},
            "updated_at": now_jst.isoformat()
          }
          OUT_JSON.write_text(json.dumps(stats, ensure_ascii=False, indent=2), encoding="utf-8")

          print("‚úÖ Generated:", SNAPSHOT_PNG, OUT_TEXT, OUT_JSON)
          PY

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_TEXT }}
            ${{ env.SNAPSHOT_PNG }}
            ${{ env.OUT_JSON }}

      - name: Checkout site repo (for publishing)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files to site (expected names)
        run: |
          set -e
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}"     "${dst}/stats.json"
          cp -f "${OUT_TEXT}"     "${dst}/post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "${dst}/intraday.png"
          echo "üìÅ Copied to ${dst}:"
          ls -l "${dst}"

      - name: Commit & push site
        working-directory: site
        run: |
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN-10 intraday charts (dark theme) ($(date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${{ env.SITE_BRANCH }}"
          fi

      - name: Post Setup Python 3.11
        if: always()
        run: python --version

      - name: Post Checkout (this repo)
        if: always()
        run: echo "‚úÖ Workflow finished."
