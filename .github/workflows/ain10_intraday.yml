name: "AIN-10 • intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      session_start:
        description: "Session start (JST)"
        required: true
        default: "22:30"
      session_end:
        description: "Session end (JST)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor (JST)"
        required: true
        default: "22:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip pandas matplotlib pytz numpy

      - name: Generate intraday snapshot (US session, JST)
        env:
          SESSION_START: ${{ inputs.session_start }}
          SESSION_END: ${{ inputs.session_end }}
          DAY_ANCHOR: ${{ inputs.day_anchor }}
          VALUE_TYPE: ${{ inputs.value_type }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pandas as pd, numpy as np, matplotlib
          from pathlib import Path
          from datetime import timedelta
          matplotlib.use("Agg")
          import matplotlib.pyplot as plt
          import json

          CSV = Path(os.environ["CSV"])
          OUT_JSON = Path(os.environ["OUT_JSON"])
          OUT_TEXT = Path(os.environ["OUT_TEXT"])
          SNAPSHOT_PNG = Path(os.environ["SNAPSHOT_PNG"])
          LABEL = os.environ.get("LABEL", "AIN-10")
          INDEX_KEY = os.environ.get("INDEX_KEY", "AIN-10")

          S_START = os.environ.get("SESSION_START", "22:30")
          S_END = os.environ.get("SESSION_END", "05:00")
          D_ANCHOR = os.environ.get("DAY_ANCHOR", "22:30")

          OUT_JSON.parent.mkdir(parents=True, exist_ok=True)
          SNAPSHOT_PNG.parent.mkdir(parents=True, exist_ok=True)
          OUT_TEXT.parent.mkdir(parents=True, exist_ok=True)

          df = pd.read_csv(CSV)
          if df.empty:
              raise RuntimeError("CSVにデータがありません。")

          # Datetime列自動検出
          dt_col = next((c for c in df.columns if "time" in c.lower() or "date" in c.lower()), None)
          if not dt_col:
              dt_col = df.columns[0]
          df[dt_col] = pd.to_datetime(df[dt_col], errors="coerce")
          df = df.dropna(subset=[dt_col])

          # UTC→JST 自動補正
          tz_diff = (pd.Timestamp.now() - df[dt_col].iloc[-1]).total_seconds() / 3600.0
          if abs(tz_diff) > 6:
              df[dt_col] = df[dt_col] + timedelta(hours=9)

          df = df.sort_values(dt_col)
          df = df.set_index(dt_col)

          # 数値列検出
          numcols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
          if not numcols:
              numcols = [df.columns[-1]]
          col = numcols[0]

          # セッション範囲
          last_dt = df.index[-1]
          start_h, start_m = map(int, S_START.split(":"))
          end_h, end_m = map(int, S_END.split(":"))
          start = last_dt.replace(hour=start_h, minute=start_m)
          end = last_dt.replace(hour=end_h, minute=end_m)
          if end <= start:
              end += timedelta(days=1)

          session_df = df.loc[(df.index >= start - timedelta(hours=1)) & (df.index <= end)]
          if session_df.empty:
              print("⚠️ セッション内データが無いため、直近1日を使用します。")
              session_df = df.last("1D")

          y = pd.to_numeric(session_df[col], errors="coerce").dropna()
          if y.empty:
              y = pd.Series([0])

          last = float(y.iloc[-1])
          last_ratio = last / 100 if abs(last) > 1 else last

          plt.figure(figsize=(12,6), dpi=160)
          plt.plot(session_df.index, y, color="#00E5FF" if last >= 0 else "#FF4D4D", linewidth=2)
          plt.title(f"{LABEL} Intraday Snapshot ({last:+.2f}%)")
          plt.grid(True, alpha=0.3)
          plt.tight_layout()
          plt.savefig(SNAPSHOT_PNG)

          OUT_JSON.write_text(json.dumps({
              "index_key": INDEX_KEY,
              "label": LABEL,
              "pct_intraday": round(last_ratio, 6),
              "basis": "prev_close",
              "session": {"start": S_START, "end": S_END, "anchor": D_ANCHOR},
              "updated_at": pd.Timestamp.now().isoformat()
          }, ensure_ascii=False, indent=2), encoding="utf-8")

          OUT_TEXT.write_text(
              f"{LABEL} Intraday Snapshot\n{last:+.2f}%\nSession: {S_START}-{S_END}\n",
              encoding="utf-8"
          )
          print(f"✅ Done. PNG/JSON/TXT generated: {SNAPSHOT_PNG}")
          PY

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_JSON }}
            ${{ env.OUT_TEXT }}
            ${{ env.SNAPSHOT_PNG }}

      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site

      - name: Copy & push to site
        run: |
          set -e
          dst="site/${PUBLISH_DIR}"
          mkdir -p "$dst"
          cp -f "${OUT_JSON}" "$dst/stats.json"
          cp -f "${OUT_TEXT}" "$dst/post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "$dst/intraday.png"
          cd site
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add .
          if git diff --cached --quiet; then
            echo "No site changes."
          else
            git commit -m "Update AIN-10 intraday charts"
            git push
          fi
