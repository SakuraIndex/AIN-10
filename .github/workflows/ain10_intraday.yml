name: "AIN-10 ‚Ä¢ intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      session_start:
        description: "Session start (HH:MM JST)"
        required: true
        default: "22:30"
      session_end:
        description: "Session end (HH:MM JST)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor time (HH:MM JST)"
        required: true
        default: "22:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  # ÊåáÊï∞Âõ∫Êúâ
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close

  # „ÉØ„Éº„ÇØ„ÉÑ„É™„ÉºÂÜÖ„ÅÆÂá∫ÂäõÔºàÂ•Ω„Åç„Å™Â†¥ÊâÄ„ÅßOK„ÄÇ„Çµ„Ç§„Éà„Å∏„ÅØÂæå„ÅßÊ≠£Ë¶èÂêç„Å´„Åó„Å¶„Ç≥„Éî„ÉºÔºâ
  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  # ÂÖ¨Èñã„Çµ„Ç§„Éà
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          if [ -f requirements.txt ]; then
            python -m pip install -U pip
            python -m pip install -r requirements.txt
          else
            python -m pip install -U pip
            python -m pip install pandas matplotlib numpy
          fi

      - name: Verify inputs & files
        shell: bash
        run: |
          set -e
          test -f "${CSV}" || (echo "‚ùå Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || echo "‚ö†Ô∏è scripts/make_intraday_post.py „ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅØÂæåÊÆµ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßPNG/JSON„Çí‰Ωú„Çä„Åæ„Åô"
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      - name: Generate intraday snapshot and post (primary)
        shell: bash
        env:
          SESSION_START: ${{ inputs.session_start }}
          SESSION_END:   ${{ inputs.session_end }}
          DAY_ANCHOR:    ${{ inputs.day_anchor }}
          VALUE_TYPE:    ${{ inputs.value_type }}
        run: |
          set -euo pipefail
          if [ -f scripts/make_intraday_post.py ]; then
            echo "=== Generate ${INDEX_KEY} intraday snapshot (primary) ==="
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --snapshot-png "${SNAPSHOT_PNG}" \
              --session-start "${SESSION_START}" \
              --session-end   "${SESSION_END}" \
              --day-anchor    "${DAY_ANCHOR}" \
              --basis         "${BASIS}" \
              --label         "${LABEL}" \
              --dt-col        "${DT_COL}" \
              --value-type    "${VALUE_TYPE}"
          else
            echo "No primary script. Will rely on fallback steps."
          fi

      # ===== „Åì„Åì„Åã„ÇâÂÆâÂÖ®„Å™„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ =====
      - name: Ensure fallback PNG/JSON if missing (safe heredoc)
        shell: bash
        env:
          CSV: ${{ env.CSV }}
          OUT_JSON: ${{ env.OUT_JSON }}
          OUT_TEXT: ${{ env.OUT_TEXT }}
          SNAPSHOT_PNG: ${{ env.SNAPSHOT_PNG }}
          LABEL: ${{ env.LABEL }}
          INDEX_KEY: ${{ env.INDEX_KEY }}
          DT_COL: ${{ env.DT_COL }}
        run: |
          set -euo pipefail

          need_png=false
          need_json=false
          [ -s "${SNAPSHOT_PNG}" ] || need_png=true
          [ -s "${OUT_JSON}" ]     || need_json=true

          if $need_png || $need_json; then
            echo "[fallback] Create missing outputs: png=${need_png} json=${need_json}"

            python - <<'PY'
import os, json
from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

CSV = Path(os.environ["CSV"])
OUT_JSON = Path(os.environ["OUT_JSON"])
OUT_TEXT = Path(os.environ["OUT_TEXT"])
SNAPSHOT_PNG = Path(os.environ["SNAPSHOT_PNG"])
LABEL = os.environ.get("LABEL","AIN-10")
DT_COL = os.environ.get("DT_COL","Datetime")
JST = "Asia/Tokyo"

df = pd.read_csv(CSV)
# Êó•ÊôÇÂàó„Çí„Åß„Åç„Çã„Å†„ÅëËá™ÂãïÊ§úÂá∫
dt = None
if DT_COL in df.columns:
    dt = pd.to_datetime(df[DT_COL], errors="coerce")
else:
    for c in df.columns:
        cand = pd.to_datetime(df[c], errors="coerce")
        if cand.notna().mean() > 0.7:
            dt = cand
            DT_COL = c
            break
if dt is not None:
    if getattr(dt.dt, "tz", None) is None:
        dt = dt.dt.tz_localize(JST)
    else:
        dt = dt.dt.tz_convert(JST)
    df.index = dt
    if DT_COL in df.columns:
        df = df.drop(columns=[DT_COL])

num_cols = [c for c in df.columns if pd.to_numeric(df[c], errors="coerce").notna().mean()>0.6]
s = df[num_cols].mean(axis=1) if num_cols else pd.Series([0.0])
last = float(np.round(s.iloc[-1], 4)) if len(s) else 0.0

# PNG
try:
    plt.figure(figsize=(12,4), dpi=160)
    x = s.index if getattr(s, "index", None) is not None else range(len(s))
    y = s.values if getattr(s, "values", None) is not None else s
    plt.plot(x, y, linewidth=2.0)
    plt.title(f"{LABEL} Intraday Snapshot ({last:+.2f}%)")
    plt.tight_layout()
    SNAPSHOT_PNG.parent.mkdir(parents=True, exist_ok=True)
    plt.savefig(SNAPSHOT_PNG)
    plt.close()
except Exception as e:
    print("[fallback] plotting error:", e)

# TEXT
OUT_TEXT.parent.mkdir(parents=True, exist_ok=True)
OUT_TEXT.write_text(f"‚ñ≤ {LABEL} Êó•‰∏≠„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà\n{last:+.2f}% (fallback)", encoding="utf-8")

# JSONÔºà„Çµ„Ç§„Éà‰∫íÊèõ: pct_intraday „ÅØ ratioÔºâ
OUT_JSON.parent.mkdir(parents=True, exist_ok=True)
payload = {
    "index_key": os.environ.get("INDEX_KEY","AIN-10"),
    "label": LABEL,
    "pct_intraday": float(np.round(last/100.0, 6)),
}
OUT_JSON.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
PY
          fi

      - name: Normalize JSON (percent‚Üíratio safety)
        shell: bash
        env:
          OUT_JSON: ${{ env.OUT_JSON }}
        run: |
          set -euo pipefail
          if [ -s "${OUT_JSON}" ]; then
            python - <<'PY'
import json, os
from pathlib import Path
p = Path(os.environ["OUT_JSON"])
try:
    d = json.loads(p.read_text(encoding="utf-8"))
except Exception:
    d = {}
v = d.get("pct_intraday")
# 1.0 „ÇíË∂Ö„Åà„ÇãÔºÖË°®Ë®ò„Å™„Çâ ratio „Å∏Ë£úÊ≠£
try:
    if isinstance(v, (int,float)) and abs(v) > 1.0:
        d["pct_intraday"] = round(float(v)/100.0, 6)
        p.write_text(json.dumps(d, ensure_ascii=False, indent=2), encoding="utf-8")
except Exception:
    pass
PY
          fi

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_JSON }}
            ${{ env.OUT_TEXT }}
            ${{ env.SNAPSHOT_PNG }}

      - name: Checkout site repo (for publishing)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files into site tree (expected names)
        shell: bash
        run: |
          set -euo pipefail
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}"     "${dst}/stats.json"
          cp -f "${OUT_TEXT}"     "${dst}/post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "${dst}/intraday.png"
          echo "üìÅ Copied to ${dst}:"
          ls -l "${dst}"

      - name: Commit & push site
        working-directory: site
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN-10 intraday charts ($(date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi
