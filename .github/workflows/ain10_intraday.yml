name: "AIN-10 ‚Ä¢ intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      sess_start:
        description: "Session start (JST, e.g. 22:30)"
        required: true
        default: "22:30"
      sess_end:
        description: "Session end (JST, e.g. 05:00)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor time (JST)"
        required: true
        default: "09:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  INDEX_KEY: AIN-10
  LABEL: AIN-10

  # ÂÖ•Âá∫ÂäõÔºà„Åì„ÅÆ„É™„ÉùÂÜÖÔºâ
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close

  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  # ÂÖ¨Èñã„Çµ„Ç§„Éà
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          if [ -f requirements.txt ]; then
            python -m pip install -U pip
            python -m pip install -r requirements.txt
          else
            python -m pip install -U pip
            python -m pip install pandas matplotlib
          fi

      - name: Verify inputs & files
        shell: bash
        run: |
          set -e
          test -f "${CSV}" || (echo "‚ùå Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py || (echo "‚ùå Missing script: scripts/make_intraday_post.py" && exit 1)
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      # --- Êó¢Â≠ò„Çπ„ÇØ„É™„Éó„Éà„Åß„ÅÆÁîüÊàêÔºàÂ§±Êïó„Åó„Å¶„ÇÇ„Ç∏„Éß„ÉñÁ∂ôÁ∂öÔºâ ---
      - name: Generate intraday snapshot (US session, JST)
        id: try_primary
        continue-on-error: true
        shell: bash
        env:
          SESSION_START: ${{ inputs.sess_start }}
          SESSION_END:   ${{ inputs.sess_end }}
          DAY_ANCHOR:    ${{ inputs.day_anchor }}
          VALUE_TYPE:    ${{ inputs.value_type }}
        run: |
          set -euo pipefail
          echo "=== Generate ${INDEX_KEY} intraday snapshot (primary) ==="
          python scripts/make_intraday_post.py \
            --index-key "${INDEX_KEY}" \
            --csv "${CSV}" \
            --out-json "${OUT_JSON}" \
            --out-text "${OUT_TEXT}" \
            --snapshot-png "${SNAPSHOT_PNG}" \
            --session-start "${SESSION_START}" \
            --session-end "${SESSION_END}" \
            --day-anchor "${DAY_ANCHOR}" \
            --basis "${BASIS}" \
            --label "${LABEL}" \
            --dt-col "${DT_COL}" \
            --value-type "${VALUE_TYPE}"

      # --- „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂÆâÂÖ®„Å™Âüã„ÇÅËæº„ÅøÔºàYAMLÂ£ä„Çå„Å™„ÅÑÔºâ ---
      - name: Ensure fallback PNG/JSON if missing (safe heredoc)
        if: steps.try_primary.outcome != 'success'
        shell: bash
        env:
          CSV:           ${{ env.CSV }}
          OUT_JSON:      ${{ env.OUT_JSON }}
          OUT_TEXT:      ${{ env.OUT_TEXT }}
          SNAPSHOT_PNG:  ${{ env.SNAPSHOT_PNG }}
          LABEL:         ${{ env.LABEL }}
          DT_COL:        ${{ env.DT_COL }}
        run: |
          set -euo pipefail

          need_png=false
          need_json=false
          [ -f "${SNAPSHOT_PNG}" ] || need_png=true
          [ -f "${OUT_JSON}" ]     || need_json=true

          if $need_png || $need_json; then
            echo "[fallback] generating ${SNAPSHOT_PNG} / ${OUT_JSON}"

            python - <<'PY'
import os, json
from pathlib import Path
import pandas as pd
import numpy as np

import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

JST = "Asia/Tokyo"

CSV          = Path(os.environ["CSV"])
OUT_JSON     = Path(os.environ["OUT_JSON"])
OUT_TEXT     = Path(os.environ["OUT_TEXT"])
SNAPSHOT_PNG = Path(os.environ["SNAPSHOT_PNG"])
LABEL        = os.environ.get("LABEL","AIN-10")
DT_COL       = os.environ.get("DT_COL","Datetime")

# --- CSV Ë™≠„ÅøËæº„Åø & Êó•ÊôÇÂàóÊ§úÂá∫ ---
df = pd.read_csv(CSV)
dt_col = DT_COL if DT_COL in df.columns else None
if dt_col is None:
    for c in df.columns:
        try:
            ok = pd.to_datetime(df[c], errors="coerce").notna().mean() > 0.7
        except Exception:
            ok = False
        if ok:
            dt_col = c
            break
if dt_col is None:
    raise SystemExit("No datetime-like column found for fallback")

dt = pd.to_datetime(df[dt_col], errors="coerce", utc=True)
dt = dt.dt.tz_convert(JST)
df.index = dt
df = df.drop(columns=[dt_col])

# --- Êï∞ÂÄ§ÂàóÂπ≥ÂùáÔºàÔºÖ„Éªratio„ÅØ„Äåauto„ÄçÊâ±„ÅÑÔºâ ---
num_cols = [c for c in df.columns if pd.to_numeric(df[c], errors="coerce").notna().mean() > 0.5]
s = df[num_cols].mean(axis=1) if num_cols else pd.Series([0.0], index=[pd.Timestamp.now(tz=JST)])

# auto: 95%ÁÇπ„Åå 0.5 Êú™Ê∫Ä„Å™„Çâ ratio‚ÜíÔºÖÊèõÁÆó
vals = pd.to_numeric(s, errors="coerce").to_numpy()
vals = vals[~np.isnan(vals)]
if vals.size and float(np.quantile(np.abs(vals), 0.95)) < 0.5:
    s = s * 100.0

last = float(s.iloc[-1]) if len(s) else 0.0

# --- „Éó„É≠„ÉÉ„ÉàÔºà„Éó„É©„ÇπÈùíÔºè„Éû„Ç§„Éä„ÇπËµ§Ôºâ ---
plt.figure(figsize=(12,6), dpi=160)
color = "#00E5FF" if last >= 0 else "#FF4D4D"
plt.plot(s.index, s.values, linewidth=2.0, color=color)
plt.title(f"{LABEL} Intraday Snapshot ({last:+.2f}%)")
plt.xlabel("Time"); plt.ylabel("Change vs Prev Close (%)")
plt.tight_layout()
SNAPSHOT_PNG.parent.mkdir(parents=True, exist_ok=True)
plt.savefig(SNAPSHOT_PNG)
plt.close()

# --- JSONÔºàratio Â∞èÊï∞„Åß‰øùÂ≠òÔºâ ---
payload = {
  "index_key": LABEL,
  "label": LABEL,
  "pct_intraday": round(last/100.0, 6),
  "basis": "prev_close",
  "session": {},
  "updated_at": pd.Timestamp.now(tz=JST).isoformat(),
}
OUT_JSON.parent.mkdir(parents=True, exist_ok=True)
OUT_JSON.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")

# --- „ÉÜ„Ç≠„Çπ„Éà ---
OUT_TEXT.parent.mkdir(parents=True, exist_ok=True)
OUT_TEXT.write_text(f"‚ñ≤ {LABEL} Êó•‰∏≠„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà\n{last:+.2f}%ÔºàfallbackÔºâ\n#{LABEL} #Êó•Êú¨Ê†™", encoding="utf-8")
PY
          fi

      - name: Upload artifacts (for debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_TEXT }}
            ${{ env.SNAPSHOT_PNG }}
            ${{ env.OUT_JSON }}

      # === ÂÖ¨Èñã„Çµ„Ç§„Éà„Å∏ÈÖçÂ∏É ===
      - name: Checkout site repo (for publishing)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files to site (expected names)
        shell: bash
        run: |
          set -euo pipefail
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}"      "${dst}/stats.json"
          cp -f "${OUT_TEXT}"      "${dst}/post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}"  "${dst}/intraday.png"
          echo "üìÅ Copied to ${dst}:"
          ls -l "${dst}"

      - name: Commit & push site charts
        working-directory: site
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN-10 intraday charts ($(date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi

      - name: Post Setup Python 3.11
        if: always()
        run: python --version

      - name: Post Checkout (this repo)
        if: always()
        run: echo "‚úÖ Workflow finished."
