name: "AIN-10 • intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      session_start:
        description: "Session start (HH:MM JST)"
        required: true
        default: "22:30"
      session_end:
        description: "Session end (HH:MM JST)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor time (HH:MM JST)"
        required: true
        default: "22:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  # === 指数情報 / 入力 ===
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close

  # === 出力（このリポ内）===
  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  # === 公開サイト ===
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  # 優先順位：SITE_PUBLISH_TOKEN → SITE_PAT → GITHUB_TOKEN
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          set -e
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install pandas matplotlib
          fi

      - name: Verify inputs & files
        shell: bash
        run: |
          set -e
          test -f "${CSV}" || (echo "❌ Missing CSV: ${CSV}" && exit 1)
          test -f scripts/make_intraday_post.py && echo "ℹ️ use local script" || echo "ℹ️ no helper script (fallbacks will handle)"

      - name: Prepare output dirs
        shell: bash
        run: |
          set -e
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      # 1) テキスト/JSON を優先生成（古い make_intraday_post.py 互換：--snapshot-png は渡さない）
      - name: Generate intraday snapshot (US session, JST)
        shell: bash
        env:
          SESSION_START: ${{ inputs.session_start }}
          SESSION_END:   ${{ inputs.session_end }}
          DAY_ANCHOR:    ${{ inputs.day_anchor }}
          VALUE_TYPE:    ${{ inputs.value_type }}
        run: |
          set -euo pipefail
          if [ -f scripts/make_intraday_post.py ]; then
            echo "== Generate ${INDEX_KEY} intraday (script) =="
            # 互換のため --snapshot-png は付けない
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --session-start "${SESSION_START}" \
              --session-end "${SESSION_END}" \
              --day-anchor "${DAY_ANCHOR}" \
              --basis "${BASIS}" \
              --label "${LABEL}" \
              --dt-col "${DT_COL}" \
              --value-type "${VALUE_TYPE}" || true
          fi

      # 2) PNG が無い/古い場合は CSV から作成（安全：ヒアドキュメント不使用）
      - name: Ensure fallback PNG (from CSV)
        shell: bash
        run: |
          set -euo pipefail
          python -c "import os, pandas as pd, matplotlib; matplotlib.use('Agg'); import matplotlib.pyplot as plt; from pathlib import Path
p_csv=Path(os.environ['CSV']); p_png=Path(os.environ['SNAPSHOT_PNG']); p_png.parent.mkdir(parents=True, exist_ok=True)
df=pd.read_csv(p_csv)
# datetime列を推定
dt_col=None
for c in ['Datetime','datetime','Timestamp','timestamp','Date','date','Time','time']:
  if c in df.columns:
    try:
      pd.to_datetime(df[c], errors='raise'); dt_col=c; break
    except Exception: pass
t=pd.to_datetime(df[dt_col], errors='coerce') if dt_col else range(len(df))
# 数値列を選択
numcols=[c for c in df.columns if c!=dt_col and pd.to_numeric(df[c], errors='coerce').notna().mean()>0.6]
col=numcols[0] if numcols else [c for c in df.columns if c!=dt_col][0]
s=pd.to_numeric(df[col], errors='coerce')
last=float(s.dropna().iloc[-1]) if s.dropna().size>0 else 0.0
plt.figure(figsize=(12,6), dpi=160)
plt.plot(t, s, linewidth=2.0)
plt.title(f'AIN-10 Intraday Snapshot  ({last:+.2f}%)')
plt.tight_layout()
plt.savefig(p_png)" || true

      # 3) JSON を ratio(小数) に正規化。無ければ最小構造を作成して補完
      - name: Normalize JSON (percent → ratio, and patch if missing)
        shell: bash
        run: |
          set -euo pipefail
          python -c "import os, json, datetime as dt, pathlib as P
p=P.Path(os.environ['OUT_JSON']); p.parent.mkdir(parents=True, exist_ok=True)
if p.exists():
  d=json.load(open(p,encoding='utf-8'))
else:
  d={'index_key':'AIN-10','label':'AIN-10','pct_intraday':None,'basis':'prev_close','session':{'start':'22:30','end':'05:00','anchor':'22:30'},'updated_at':''}
v=d.get('pct_intraday', None)
if isinstance(v,(int,float)) and abs(float(v))>1.0:
  d['pct_intraday']=round(float(v)/100.0,6)
if not d.get('updated_at'):
  d['updated_at']=dt.datetime.now().astimezone().isoformat()
json.dump(d, open(p,'w',encoding='utf-8'), ensure_ascii=False, indent=2)"

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_TEXT }}
            ${{ env.OUT_JSON }}
            ${{ env.SNAPSHOT_PNG }}

      # === 公開サイトへ反映 ===
      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files into site tree (both canonical & fallback names)
        shell: bash
        run: |
          set -euo pipefail
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          # サイト期待名
          cp -f "${OUT_JSON}"     "${dst}/ain10_stats.json"
          cp -f "${OUT_TEXT}"     "${dst}/ain10_post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "${dst}/ain10_1d.png"
          # 互換のため汎用名も配置
          cp -f "${OUT_JSON}"     "${dst}/stats.json" || true
          cp -f "${OUT_TEXT}"     "${dst}/post_intraday.txt" || true
          cp -f "${SNAPSHOT_PNG}" "${dst}/intraday.png" || true
          echo "📁 Copied to ${dst}:"
          ls -l "${dst}"

      - name: Commit & push site
        working-directory: site
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN
