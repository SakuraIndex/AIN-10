name: "AIN-10 ‚Ä¢ intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      sess_start:
        description: "Session start (JST) ‚Äî USÁèæÂú∞ 09:30 „ÅØÊ¶Ç„Å≠ 23:30JSTÔºàDST„ÅßÂâçÂæåÔºâ"
        required: true
        default: "23:30"
      sess_end:
        description: "Session end (JST) ‚Äî USÁèæÂú∞ 16:00 „ÅØÊ¶Ç„Å≠ 06:00JSTÔºàDST„ÅßÂâçÂæåÔºâ"
        required: true
        default: "06:00"
      day_anchor:
        description: "Day anchor time (JST) ‚Äî „É≠„Éº„É™„É≥„Ç∞Â¢ÉÁïå"
        required: true
        default: "23:30"
      value_type:
        description: "CSV„ÅÆÂçò‰Ωç: auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  # ÂÖ•ÂäõCSV„ÉªÂàó„ÉªÂü∫Ê∫ñ
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close
  VALUE_TYPE: ${{ inputs.value_type }}

  # „Åì„ÅÆ„É™„ÉùÂÜÖ„ÅÆ‰∏ÄÊôÇÂá∫ÂäõÔºà„Çµ„Ç§„Éà„Å∏„Ç≥„Éî„ÉºÊôÇ„Å´Ê≠£ÂºèÂêç„Å∏„É™„Éç„Éº„É†Ôºâ
  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  # ÂÖ¨Èñã„Çµ„Ç§„Éà
  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -e
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install pandas matplotlib numpy
          fi

      - name: Verify inputs & files
        run: |
          set -e
          test -f "${CSV}" || { echo "‚ùå Missing CSV: ${CSV}"; exit 1; }

      - name: Prepare output directories
        run: |
          set -e
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      # 1) ÂèØËÉΩ„Å™„ÇâÊó¢Â≠ò„Çπ„ÇØ„É™„Éó„Éà„Çí‰Ωø„ÅÜÔºàÂ≠òÂú®„Åó„Å™„Åë„Çå„Å∞„Çπ„Ç≠„ÉÉ„ÉóÔºâ
      - name: Generate intraday snapshot (US session, JST)
        id: try_primary
        shell: bash
        continue-on-error: true
        run: |
          if [ -f scripts/make_intraday_post.py ]; then
            echo "== Use scripts/make_intraday_post.py =="
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --snapshot-png "${SNAPSHOT_PNG}" \
              --session-start "${{ inputs.sess_start }}" \
              --session-end   "${{ inputs.sess_end }}" \
              --day-anchor    "${{ inputs.day_anchor }}" \
              --basis "${BASIS}" \
              --label "${LABEL}" \
              --dt-col "${DT_COL}" \
              --value-type "${VALUE_TYPE}"
          else
            echo "scripts/make_intraday_post.py not found. Skip primary."
            exit 1
          fi

      # 2) „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºàPNG/JSONÂÆâÂÖ®ÁîüÊàêÔºâ
      - name: Ensure fallback PNG/JSON if missing (safe heredoc)
        if: steps.try_primary.outcome != 'success'
        shell: bash
        env:
          SESS_START: ${{ inputs.sess_start }}
          SESS_END:   ${{ inputs.sess_end }}
          DAY_ANCHOR: ${{ inputs.day_anchor }}
        run: |
          set -euo pipefail

          need_png=false
          need_json=false
          [ -f "${SNAPSHOT_PNG}" ] || need_png=true
          [ -f "${OUT_JSON}" ]     || need_json=true

          if $need_png || $need_json; then
            echo "[fallback] generating ${SNAPSHOT_PNG} / ${OUT_JSON}"

cat > _fallback_intraday.py <<'PY'
import os, json
from pathlib import Path
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

# ---- env ----
CSV          = Path(os.environ["CSV"])
OUT_JSON     = Path(os.environ["OUT_JSON"])
OUT_TEXT     = Path(os.environ["OUT_TEXT"])
SNAPSHOT_PNG = Path(os.environ["SNAPSHOT_PNG"])
LABEL        = os.environ.get("LABEL","AIN-10")
DT_COL       = os.environ.get("DT_COL","Datetime")
JST          = "Asia/Tokyo"
VALUE_TYPE   = os.environ.get("VALUE_TYPE","auto")

def _detect_ratio(series: pd.Series) -> bool:
    v = pd.to_numeric(series, errors="coerce").to_numpy()
    v = v[~np.isnan(v)]
    if v.size == 0:
        return False
    return float(np.quantile(np.abs(v), 0.95)) < 0.5

# ---- load & index to JST ----
df = pd.read_csv(CSV)
# Êó•ÊôÇÂàó„ÅÆËá™ÂãïÊ§úÂá∫
dt_col = DT_COL if DT_COL in df.columns else None
if dt_col is None:
    for c in df.columns:
        if pd.to_datetime(df[c], errors="coerce").notna().mean() > 0.7:
            dt_col = c; break
if dt_col is None:
    raise SystemExit("No datetime-like column in CSV")

dt = pd.to_datetime(df[dt_col], errors="coerce", utc=True)
dt = dt.dt.tz_convert(JST)
df = df.drop(columns=[dt_col])
df.index = dt
df = df.sort_index()
# ÂΩìÊó•„Çª„ÉÉ„Ç∑„Éß„É≥ÊäΩÂá∫ÔºàJST„ÄÅUSÂ∏ÇÂ†¥„ÇíJST„ÅßÂàá„ÇäÂá∫„ÅôÔºâ
# Áõ¥ËøëÊó•„ÅÆ„Åø
day = df.index[-1].date()
start = pd.Timestamp(f"{day} {os.environ.get('SESS_START','23:30')}", tz=JST)
end   = pd.Timestamp(f"{day} {os.environ.get('SESS_END','06:00')}", tz=JST)
if end < start:
    # Ë∑®„ÅéÔºà23:30‚Üí06:00 „Å™„Å©Ôºâ
    mask = (df.index >= start) | (df.index <= end)
else:
    mask = (df.index >= start) & (df.index <= end)
dfs = df.loc[mask]

# Êï∞ÂÄ§ÂàóÂπ≥Âùá or ‰ª£Ë°®Âàó
num_cols = [c for c in dfs.columns if pd.to_numeric(dfs[c], errors="coerce").notna().mean() > 0.5]
if not num_cols:
    raise SystemExit("No numeric columns to plot.")
s = dfs[num_cols].mean(axis=1)

vt = VALUE_TYPE.lower()
if vt == "auto":
    vt = "ratio" if _detect_ratio(s) else "percent"
if vt == "ratio":
    s = s * 100.0

last = float(s.iloc[-1]) if not s.empty else 0.0

# ---- plot ----
fig, ax = plt.subplots(figsize=(12,6), dpi=160)
fig.patch.set_facecolor("#000000"); ax.set_facecolor("#000000")
for sp in ax.spines.values(): sp.set_color("#444444")
color = "#00E5FF" if last >= 0 else "#FF4D4D"
ax.plot(s.index, s.values, linewidth=2.0, color=color)
ax.set_title(f"{LABEL} Intraday Snapshot ({s.index[-1].tz_convert(JST):%Y/%m/%d %H:%M})  {last:+.2f}%",
             color="#DDDDDD")
ax.set_xlabel("Time", color="#BBBBBB"); ax.set_ylabel("Change vs Prev Close (%)", color="#BBBBBB")
ax.tick_params(colors="#BBBBBB"); ax.grid(True, color="#333333", linewidth=0.5, alpha=0.6)
fig.tight_layout()
SNAPSHOT_PNG.parent.mkdir(parents=True, exist_ok=True)
fig.savefig(SNAPSHOT_PNG, facecolor=fig.get_facecolor(), edgecolor="none"); plt.close(fig)

# ---- text ----
arrow = "‚ñ≤" if last >= 0 else "‚ñº"
OUT_TEXT.parent.mkdir(parents=True, exist_ok=True)
OUT_TEXT.write_text(
    f"{arrow} {LABEL} Êó•‰∏≠„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà ({s.index[-1].tz_convert(JST):%Y/%m/%d %H:%M})\n"
    f"{last:+.2f}% (Âü∫Ê∫ñ: prev_close)\n"
    f"#{LABEL} #Êó•Êú¨Ê†™",
    encoding="utf-8"
)

# ---- json (ratio, Â∞èÊï∞) ----
payload = {
  "index_key": LABEL,
  "label": LABEL,
  "pct_intraday": round(last/100.0, 6),
  "basis": "prev_close",
  "session": {"start": os.environ.get("SESS_START"), "end": os.environ.get("SESS_END"),
              "anchor": os.environ.get("DAY_ANCHOR")},
  "updated_at": pd.Timestamp.now(tz=JST).isoformat()
}
OUT_JSON.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
PY

            python _fallback_intraday.py
          fi

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_TEXT }}
            ${{ env.SNAPSHOT_PNG }}
            ${{ env.OUT_JSON }}

      # === ÂÖ¨Èñã„Çµ„Ç§„Éà„Å∏Áô∫Ë°å ===
      - name: Checkout site repo (publishing)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files (site expected names)
        run: |
          set -euo pipefail
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          cp -f "${OUT_JSON}"     "${dst}/stats.json"
          cp -f "${OUT_TEXT}"     "${dst}/post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "${dst}/intraday.png"
          echo "üìÅ Copied to ${dst}"; ls -l "${dst}"

      - name: Commit & push site
        working-directory: site
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN-10 intraday charts ($(date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi
