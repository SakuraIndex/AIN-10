name: "AIN-10 • intraday + publish (US Market Time)"

on:
  workflow_dispatch:
    inputs:
      session_start:
        description: "Session start (HH:MM JST)"
        required: true
        default: "22:30"
      session_end:
        description: "Session end (HH:MM JST)"
        required: true
        default: "05:00"
      day_anchor:
        description: "Day anchor time (HH:MM JST)"
        required: true
        default: "22:30"
      value_type:
        description: "auto | percent | ratio"
        required: true
        default: "auto"

permissions:
  contents: write

env:
  INDEX_KEY: AIN-10
  LABEL: AIN-10
  CSV: docs/outputs/ain10_intraday.csv
  DT_COL: Datetime
  BASIS: prev_close

  OUT_JSON: docs/charts/ain10_stats.json
  OUT_TEXT: docs/charts/ain10_post_intraday.txt
  SNAPSHOT_PNG: docs/charts/ain10_1d.png

  SITE_REPO: SakuraIndex/Sakura-Index-Site
  SITE_BRANCH: main
  PUBLISH_DIR: docs/charts/AIN10
  PUBLISH_TOKEN: ${{ secrets.SITE_PUBLISH_TOKEN || secrets.SITE_PAT || secrets.GITHUB_TOKEN }}

concurrency:
  group: "intraday-ain10-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          set -e
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install pandas matplotlib
          fi

      - name: Verify inputs & files
        shell: bash
        run: |
          set -e
          test -f "${CSV}" || (echo "❌ Missing CSV: ${CSV}" && exit 1)
          if [ -f scripts/make_intraday_post.py ]; then
            echo "ℹ️ scripts/make_intraday_post.py found"
          else
            echo "ℹ️ helper script not found; fallbacks will run"
          fi

      - name: Prepare output dirs
        shell: bash
        run: |
          set -e
          mkdir -p "$(dirname "${OUT_JSON}")" "$(dirname "${OUT_TEXT}")" "$(dirname "${SNAPSHOT_PNG}")"

      # 1) まず JSON/TEXT を優先生成（古い helper に合わせて --snapshot-png は渡さない）
      - name: Generate intraday snapshot (US session, JST)
        shell: bash
        env:
          SESSION_START: ${{ inputs.session_start }}
          SESSION_END:   ${{ inputs.session_end }}
          DAY_ANCHOR:    ${{ inputs.day_anchor }}
          VALUE_TYPE:    ${{ inputs.value_type }}
        run: |
          set -euo pipefail
          if [ -f scripts/make_intraday_post.py ]; then
            python scripts/make_intraday_post.py \
              --index-key "${INDEX_KEY}" \
              --csv "${CSV}" \
              --out-json "${OUT_JSON}" \
              --out-text "${OUT_TEXT}" \
              --session-start "${SESSION_START}" \
              --session-end "${SESSION_END}" \
              --day-anchor "${DAY_ANCHOR}" \
              --basis "${BASIS}" \
              --label "${LABEL}" \
              --dt-col "${DT_COL}" \
              --value-type "${VALUE_TYPE}" || true
          fi

      # 2) PNG が無い/古い場合は CSV から生成（厳密ヒアドキュメントで安全）
      - name: Ensure fallback PNG (from CSV)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os
from pathlib import Path
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

p_csv = Path(os.environ["CSV"])
p_png = Path(os.environ["SNAPSHOT_PNG"])
p_png.parent.mkdir(parents=True, exist_ok=True)

# CSV 読み込み
df = pd.read_csv(p_csv)

# datetime 列推定
dt_col = None
for c in ["Datetime","datetime","Timestamp","timestamp","Date","date","Time","time"]:
    if c in df.columns:
        try:
            pd.to_datetime(df[c], errors="raise")
            dt_col = c
            break
        except Exception:
            pass

t = pd.to_datetime(df[dt_col], errors="coerce") if dt_col else range(len(df))

# 数値列を選択
numcols = [c for c in df.columns if c != dt_col and pd.to_numeric(df[c], errors="coerce").notna().mean() > 0.6]
col = numcols[0] if numcols else [c for c in df.columns if c != dt_col][0]

s = pd.to_numeric(df[col], errors="coerce")
sd = s.dropna()
last = float(sd.iloc[-1]) if not sd.empty else 0.0

plt.figure(figsize=(12,6), dpi=160)
plt.plot(t, s, linewidth=2.0)
plt.title(f"AIN-10 Intraday Snapshot  ({last:+.2f}%)")
plt.tight_layout()
plt.savefig(p_png)
PY

      # 3) JSON を ratio(小数) へ正規化。無ければ最小構造を生成
      - name: Normalize JSON (percent → ratio, and patch if missing)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os, json
from pathlib import Path
import datetime as dt

p = Path(os.environ["OUT_JSON"])
p.parent.mkdir(parents=True, exist_ok=True)

if p.exists():
    with open(p, encoding="utf-8") as f:
        d = json.load(f)
else:
    d = {
        "index_key": "AIN-10",
        "label": "AIN-10",
        "pct_intraday": None,
        "basis": "prev_close",
        "session": {"start":"22:30","end":"05:00","anchor":"22:30"},
        "updated_at": ""
    }

v = d.get("pct_intraday", None)
if isinstance(v, (int, float)) and abs(float(v)) > 1.0:
    d["pct_intraday"] = round(float(v)/100.0, 6)

if not d.get("updated_at"):
    d["updated_at"] = dt.datetime.now().astimezone().isoformat()

with open(p, "w", encoding="utf-8") as f:
    json.dump(d, f, ensure_ascii=False, indent=2)
PY

      - name: Upload artifacts (for debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ain10_intraday_artifacts
          path: |
            ${{ env.OUT_TEXT }}
            ${{ env.OUT_JSON }}
            ${{ env.SNAPSHOT_PNG }}

      # 4) サイトへ反映
      - name: Checkout site repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SITE_REPO }}
          ref: ${{ env.SITE_BRANCH }}
          token: ${{ env.PUBLISH_TOKEN }}
          path: site
          fetch-depth: 0

      - name: Copy files into site tree (canonical & fallback names)
        shell: bash
        run: |
          set -euo pipefail
          dst="site/${PUBLISH_DIR}"
          mkdir -p "${dst}"
          # 期待名
          cp -f "${OUT_JSON}"     "${dst}/ain10_stats.json"
          cp -f "${OUT_TEXT}"     "${dst}/ain10_post_intraday.txt"
          cp -f "${SNAPSHOT_PNG}" "${dst}/ain10_1d.png"
          # 互換の汎用名
          cp -f "${OUT_JSON}"     "${dst}/stats.json" || true
          cp -f "${OUT_TEXT}"     "${dst}/post_intraday.txt" || true
          cp -f "${SNAPSHOT_PNG}" "${dst}/intraday.png" || true
          echo "📁 Copied to ${dst}:"
          ls -l "${dst}"

      - name: Commit & push site
        working-directory: site
        shell: bash
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name  "github-actions[bot]"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update AIN-10 intraday charts ($(date '+%Y-%m-%d %H:%M JST'))"
            git push origin "${SITE_BRANCH}"
          fi

      - name: Done
        shell: bash
        run: echo "✅ Workflow finished."
